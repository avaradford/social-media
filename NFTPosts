// NFTPost.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract NFTPost is ERC721URIStorage {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    // Revenue sharing percentages (in basis points - 100 = 1%)
    uint256 public constant CREATOR_SHARE = 7000; // 70%
    uint256 public constant PLATFORM_SHARE = 3000; // 30%

    // Platform developer addresses
    address public platformAddress;

    // Mapping for content creators
    mapping(uint256 => address) public creators;

    // Mapping for post ownership status
    mapping(uint256 => bool) public postSold;

    // Price for each post
    mapping(uint256 => uint256) public postPrices;

    constructor() ERC721("BentleySocialPost", "BSP") {
        platformAddress = msg.sender; // Platform address is the contract deployer
    }

    function createPost(string memory tokenURI, uint256 price) public returns (uint256) {
        _tokenIds.increment();
        uint256 newPostId = _tokenIds.current();

        _mint(msg.sender, newPostId);
        _setTokenURI(newPostId, tokenURI);

        creators[newPostId] = msg.sender;
        postPrices[newPostId] = price;

        return newPostId;
    }

    function buyPost(uint256 tokenId) public payable {
        require(_exists(tokenId), "Post does not exist");
        require(!postSold[tokenId], "Post already sold");
        require(msg.value >= postPrices[tokenId], "Insufficient payment");

        address creator = creators[tokenId];

        // Calculate shares
        uint256 creatorPayment = (msg.value * CREATOR_SHARE) / 10000;
        uint256 platformPayment = msg.value - creatorPayment;

        // Transfer ownership
        _transfer(creator, msg.sender, tokenId);

        // Mark as sold
        postSold[tokenId] = true;

        // Send payments
        payable(creator).transfer(creatorPayment);
        payable(platformAddress).transfer(platformPayment);
    }

    // Platform can update its address
    function updatePlatformAddress(address newAddress) public {
        require(msg.sender == platformAddress, "Only platform can update");
        platformAddress = newAddress;
    }
}